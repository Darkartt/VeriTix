--- a/foundry/src/VeriTixEvent.sol
+++ b/foundry/src/VeriTixEvent.sol
@@ -51,6 +51,9 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
     /// @dev Maximum number of tickets per address
     uint256 public constant MAX_TICKETS_PER_ADDRESS = 20;
 
+    /// @dev Minimum resale price (95% of face value)
+    uint256 public immutable minResalePrice;
+
     // ============ CONSTRUCTOR ============
 
     /**
@@ -118,6 +121,9 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
         maxSupply = maxSupply_;
         ticketPrice = ticketPrice_;
         organizer = organizer_;
+        
+        // Set minimum resale price to 95% of face value
+        minResalePrice = (ticketPrice_ * 95) / 100;
         maxResalePercent = maxResalePercent_;
         organizerFeePercent = organizerFeePercent_;
         _baseTokenURI = baseURI_;
@@ -337,6 +343,16 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
         return purchased >= MAX_TICKETS_PER_ADDRESS ? 0 : MAX_TICKETS_PER_ADDRESS - purchased;
     }
 
+    /**
+     * @dev Get minimum resale price
+     * @return minimum The minimum allowed resale price
+     */
+    function getMinResalePrice() external view returns (uint256 minimum) {
+        return minResalePrice;
+    }
+
     /**
      * @dev Resell a ticket through the controlled resale mechanism
      * @param tokenId The ID of the ticket to resell
@@ -355,6 +371,11 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
             revert IncorrectPayment(msg.value, price);
         }
 
+        // Check minimum resale price
+        if (price < minResalePrice) {
+            revert BelowMinimumResalePrice(price, minResalePrice);
+        }
+
         // Check if event is cancelled (single SLOAD)
         if (cancelled) {
             revert EventIsCancelled();
--- a/foundry/src/interfaces/IVeriTixEvent.sol
+++ b/foundry/src/interfaces/IVeriTixEvent.sol
@@ -46,6 +46,7 @@ interface IVeriTixEvent is IERC165 {
     error EventAlreadyCancelled();
     error EventNotCancelled();
     error PurchaseLimitExceeded(address buyer, uint256 limit);
+    error BelowMinimumResalePrice(uint256 price, uint256 minimum);
 
     // ============ EVENTS ============
 
@@ -128,6 +129,13 @@ interface IVeriTixEvent is IERC165 {
      */
     function getRemainingPurchaseLimit(address buyer) external view returns (uint256 remaining);
 
+    /**
+     * @dev Get minimum resale price
+     * @return minimum The minimum allowed resale price
+     */
+    function getMinResalePrice() external view returns (uint256 minimum);
+
     // ============ CORE FUNCTIONS ============
 
     /**