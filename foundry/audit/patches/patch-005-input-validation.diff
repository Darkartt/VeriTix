--- a/foundry/src/VeriTixEvent.sol
+++ b/foundry/src/VeriTixEvent.sol
@@ -54,6 +54,10 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
     /// @dev Minimum resale price (95% of face value)
     uint256 public immutable minResalePrice;
 
+    /// @dev Input validation constants
+    uint256 public constant MAX_BASE_URI_LENGTH = 200;
+    uint256 public constant MAX_CANCELLATION_REASON_LENGTH = 500;
+
     // ============ CONSTRUCTOR ============
 
     /**
@@ -380,6 +384,11 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
             revert BelowMinimumResalePrice(price, minResalePrice);
         }
 
+        // Overflow protection for price calculations
+        if (price > type(uint256).max / 100) {
+            revert PriceTooHigh(price);
+        }
+
         // Check if event is cancelled (single SLOAD)
         if (cancelled) {
             revert EventIsCancelled();
@@ -418,6 +427,11 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
         // Calculate organizer fee
         uint256 organizerFee = VeriTixTypes.calculateOrganizerFee(
             price,
+        
+        // Check for underflow before subtraction
+        if (price < organizerFee) {
+            revert InvalidFeeCalculation(price, organizerFee);
+        }
 
         // Gas optimization: Calculate seller proceeds once
         uint256 sellerProceeds;
@@ -580,12 +594,35 @@ contract VeriTixEvent is ERC721, Ownable, ReentrancyGuard, IVeriTixEvent {
     function setBaseURI(
         string calldata newBaseURI
     ) external override onlyOwner {
-        // Validate new base URI
-        if (bytes(newBaseURI).length == 0) {
+        bytes memory uriBytes = bytes(newBaseURI);
+        
+        // Comprehensive validation
+        if (uriBytes.length == 0) {
             revert EmptyBaseURI();
         }
+        if (uriBytes.length > MAX_BASE_URI_LENGTH) {
+            revert BaseURITooLong(uriBytes.length, MAX_BASE_URI_LENGTH);
+        }
+        
+        // Content validation - printable ASCII only
+        for (uint256 i = 0; i < uriBytes.length; i++) {
+            bytes1 char = uriBytes[i];
+            if (char < 0x20 || char > 0x7E) {
+                revert InvalidBaseURICharacter(uint8(char));
+            }
+        }
 
-        // Check if URI is actually changing
-        if (keccak256(bytes(newBaseURI)) == keccak256(bytes(_baseTokenURI))) {
+        if (keccak256(uriBytes) == keccak256(bytes(_baseTokenURI))) {
             revert BaseURIUnchanged();
         }
 
         // Update base URI
         _baseTokenURI = newBaseURI;
+        emit BaseURIUpdated(newBaseURI);
+    }
+    
+    function cancelEvent(string calldata reason) external override onlyOwner {
+        bytes memory reasonBytes = bytes(reason);
+        
+        // Enhanced validation
+        if (reasonBytes.length == 0) {
+            revert EmptyCancellationReason();
+        }
+        if (reasonBytes.length > MAX_CANCELLATION_REASON_LENGTH) {
+            revert CancellationReasonTooLong(reasonBytes.length, MAX_CANCELLATION_REASON_LENGTH);
+        }
+        
+        if (cancelled) {
+            revert EventAlreadyCancelled();
+        }
+        
+        cancelled = true;
+        emit EventCancelled(reason);
     }
--- a/foundry/src/interfaces/IVeriTixEvent.sol
+++ b/foundry/src/interfaces/IVeriTixEvent.sol
@@ -51,6 +51,11 @@ interface IVeriTixEvent is IERC165 {
     error MaxSupplyTooHigh();
     error MaxResalePercentTooHigh();
     error OrganizerFeePercentTooHigh();
+    error PriceTooHigh(uint256 price);
+    error InvalidFeeCalculation(uint256 price, uint256 fee);
+    error BaseURITooLong(uint256 length, uint256 maxLength);
+    error InvalidBaseURICharacter(uint8 character);
+    error CancellationReasonTooLong(uint256 length, uint256 maxLength);
 
     // ============ EVENTS ============
 
@@ -75,6 +80,11 @@ interface IVeriTixEvent is IERC165 {
      */
     event EventCancelled(string reason);
 
+    /**
+     * @dev Emitted when base URI is updated
+     */
+    event BaseURIUpdated(string newBaseURI);
+
     // ============ VIEW FUNCTIONS ============